server {
    listen      80;
    listen      443 ssl http2;
    #listen      [::]:80;
    #listen      [::]:443 ssl http2;

    access_log  /var/log/nginx/default-access.log detailed;
    error_log   /var/log/nginx/default-error.log debug;

    ## ssl setup
    ssl_certificate        /etc/nginx/ssl/certs/server.crt;  # replace this with a certificate signed by a real CA such as DigiCert or Letsencrypt
    ssl_certificate_key    /etc/nginx/ssl/certs/server.key;  # replace this with a certificate key given by a real CA such as DigiCert or Letsencrypt
    ssl_trusted_certificate /etc/nginx/ssl/trust/ca.crt;     #trust the cert chain

    # Important:
    # This is the CA cert against which the client will be validated against. In our case since the Server and
    # the Client certificate is generated from the same CA, we use the ca.crt
    #
    # In actual production, replace this with a self-generated private CA. Use this private CA to generate
    # certificates and issue them to the clients who will be making the connection to this server.
    ssl_client_certificate /etc/nginx/ssl/trust/ca.crt;

    # Enables 2-way SSL to verify the client's identity
    ssl_verify_client      on;

    ## block these irritating bots
    if ($http_user_agent ~ (ahrefs|wget|crawler|majestic)) {
        return 403;
    }

    location / {
        # force https-redirects
        if ( $scheme != "https" ) {
            return 301 https://$host$request_uri;
        }

        if ($ssl_client_verify != SUCCESS) {
            return 403 "Invalid client certificate";
        }


        # kill cache
        add_header Cache-Control no-cache;

        # direct traffic to API server
        proxy_set_header HOST $host;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host:$server_port;

        # when you enable the middle nginx revert proxy, pls use this to get the client cert,
        # not to get the middle nginx cert, $ssl_client_escaped_cert is the middle nginx cert
        proxy_set_header X-Client-Cert $http_x_client_cert;

        # when you don't enable the middle nginx, pls use this to get the client cert
        # pls ref https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_client_escaped_cert
        #proxy_set_header X-Client-Cert $ssl_client_escaped_cert;

        # 传递自定义头 X-My-Header
        proxy_set_header X-CLIENT-SERVER-TOKEN $http_x_client_server_token;

        client_max_body_size       10m;
        client_body_buffer_size    128k;
        proxy_connect_timeout      60s;
        proxy_send_timeout         500s;  # backend debug, so make it longer
        proxy_read_timeout         500s;  # backend debug, so make it longer
        proxy_buffering            off;
        proxy_temp_file_write_size 64k;

        # This enable the debugging server code on you local, nginx runs in docker.
        # server code runs on port 8000 on local PC
        #proxy_pass                 http://host.docker.internal:8000;

        # this is the backend server runs in docker
        proxy_pass                 http://api.python.ddl.com;
        proxy_redirect             off;

        rewrite ^/(.*)$ /$1 break;
    }
}